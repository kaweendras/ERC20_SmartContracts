// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

// ERC-404: Semi-fungible NFT (Fractional NFT)

contract ERC404Token is IERC20, ERC721URIStorage, Ownable {
    string public constant name = "ERC404Token";
    string public constant symbol = "ERC404";
    uint8 public constant decimals = 18;
    uint256 private _totalSupply;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    
    // Fractional NFTs mapping
    mapping(uint256 => uint256) public fractions; // NFT ID => fraction count

    constructor() ERC721("ERC404Token", "ERC404") {
        _totalSupply = 1000000 * (10 ** uint256(decimals));
        _balances[msg.sender] = _totalSupply;
    }

    // ERC-20 Implementation

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(_balances[msg.sender] >= amount, "Insufficient balance");
        _balances[msg.sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(_balances[sender] >= amount, "Insufficient balance");
        require(_allowances[sender][msg.sender] >= amount, "Allowance exceeded");
        _balances[sender] -= amount;
        _balances[recipient] += amount;
        _allowances[sender][msg.sender] -= amount;
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    // ERC-721 Fractionalization Logic

    function mintNFT(string memory tokenURI, uint256 fractionCount) public onlyOwner {
        uint256 tokenId = totalSupply();
        _mint(msg.sender, tokenId);
        _setTokenURI(tokenId, tokenURI);
        fractions[tokenId] = fractionCount;
    }

    function fractionalize(uint256 tokenId, uint256 fractionAmount) public {
        require(ownerOf(tokenId) == msg.sender, "Not the NFT owner");
        require(fractions[tokenId] >= fractionAmount, "Not enough fractions");
        fractions[tokenId] -= fractionAmount;
        _balances[msg.sender] += fractionAmount;
        _totalSupply += fractionAmount;
        emit Transfer(address(0), msg.sender, fractionAmount);
    }

    function redeemFraction(uint256 tokenId, uint256 fractionAmount) public {
        require(fractions[tokenId] + fractionAmount <= _totalSupply, "Too many fractions");
        _balances[msg.sender] -= fractionAmount;
        fractions[tokenId] += fractionAmount;
        _totalSupply -= fractionAmount;
        emit Transfer(msg.sender, address(0), fractionAmount);
    }
}
